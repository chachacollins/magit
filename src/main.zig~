const std = @import("std");
const util = @import("util.zig");

const exitCodes = enum {
    Success,
    UnitializedProject,
    TooFewCommands,
    ProvideFilePath,
    CouldNotCreateDir,
    CouldNotCreateFile,
};

pub fn main() !void {
    const fs = std.fs.cwd();
    const allocator = std.heap.page_allocator;
    const args = try std.process.argsAlloc(allocator);
    defer std.process.argsFree(allocator, args);
    const magit = ".magit";
    const path = try std.process.getCwdAlloc(allocator);
    defer allocator.free(path);

    if (args.len < 2) {
        std.debug.print("Too few commands passed to the program\n", .{});
        std.process.exit(@intFromEnum(exitCodes.TooFewCommands));
    }
    if (std.mem.eql(u8, "init", args[1])) {
        fs.makeDir(magit) catch {
            std.debug.print("Could not initialies magit repo", .{});
            std.process.exit(@intFromEnum(exitCodes.CouldNotCreateDir));
        };
        var handler = try fs.createFile(".magitignore", .{ .truncate = false });
        defer handler.close();
        try handler.writeAll(".magit");
        std.debug.print("Initialised empty magit repository at {s}\n", .{path});
    } else if (std.mem.eql(u8, "hash", args[1])) {
        _ = fs.openDir("./.magit", .{}) catch {
            std.debug.print("Initialise project to use this command\n", .{});
            std.process.exit(@intFromEnum(exitCodes.UnitializedProject));
        };
        if (args.len < 3) {
            std.debug.print("Please provide a file path\n", .{});
            std.process.exit(@intFromEnum(exitCodes.ProvideFilePath));
        }
        const maxBytes = 4096;
        var hasher = std.crypto.hash.Sha1.init(.{});
        var file = fs.openFile(args[2], .{}) catch {
            std.debug.print("could not open File {s}\n", .{args[2]});
            return;
        };
        defer file.close();
        var bufferedReader = std.io.bufferedReader(file.reader());
        const reader = bufferedReader.reader();
        hasher.update("blob\x00");
        while (try reader.readUntilDelimiterOrEofAlloc(allocator, '\n', maxBytes)) |line| {
            defer allocator.free(line);
            hasher.update(line);
        }
        var digest: [20]u8 = undefined;
        hasher.final(&digest);
        fs.makeDir(magit ++ "/objects") catch {};
        const hashString = try util.hexToString(digest, allocator);
        defer allocator.free(hashString);
        const filePath = try std.fmt.allocPrint(allocator, "{s}/{s}/objects/{s}", .{ path, magit, hashString });
        defer allocator.free(filePath);
        var handle = try fs.createFile(filePath, .{ .truncate = false });
        defer handle.close();
        try file.seekTo(0);
        while (try reader.readUntilDelimiterOrEofAlloc(allocator, '\n', maxBytes)) |line| {
            defer allocator.free(line);
            try handle.writeAll(line);
        }
    } else if (std.mem.eql(u8, "cat", args[1])) {
        if (args.len < 3) {
            std.debug.print("Please provide a file path", .{});
            std.process.exit(@intFromEnum(exitCodes.ProvideFilePath));
        }
        const filePath = try std.fmt.allocPrint(allocator, "{s}/{s}/objects/{s}", .{ path, magit, args[2] });
        var file = fs.openFile(filePath, .{}) catch |err| {
            std.debug.print("Could not open the file at path {s}\n due to {}", .{ filePath, err });
            return err;
        };
        defer file.close();
        var bufferedReader = std.io.bufferedReader(file.reader());
        const reader = bufferedReader.reader();
        while (try reader.readUntilDelimiterOrEofAlloc(allocator, '\n', 4096)) |line| {
            defer allocator.free(line);
            std.debug.print("{s}\n", .{line});
        }
    } else if (std.mem.eql(u8, "write-tree", args[1])) {
        var ignoredFiles = std.ArrayList([]u8).init(allocator);
        defer ignoredFiles.deinit();
        const openFile = fs.openFile(".magitignore", .{}) catch |err| {
            std.debug.print(".magit file not found: {}\n", .{err});
            return;
        };
        defer openFile.close();
        var bufferedReader = std.io.bufferedReader(openFile.reader());
        var reader = bufferedReader.reader();
        while (try reader.readUntilDelimiterOrEofAlloc(allocator, '\n', 4096)) |line| {
            defer allocator.free(line);
            try ignoredFiles.append(line);
        }
        var dir = try std.fs.cwd().openDir(".", .{ .iterate = true });
        defer dir.close();
        var walker = try dir.walk(allocator);
        defer walker.deinit();
        var isIgnored = std.StringHashMap(bool).init(allocator);
        defer isIgnored.deinit();

        while (try walker.next()) |entry| {
            var ignored = false;
            for (ignoredFiles.items) |value| {
                if (std.mem.eql(u8, value, entry.path)) {
                    ignored = true;
                    break;
                }
            }
            try isIgnored.put(entry.path, ignored);
        }
        var iter = isIgnored.iterator();
        while (iter.next()) |entry| {
            if (entry.value_ptr.*) {
                std.debug.print("Ignored file or dir: {s}\n", .{entry.key_ptr.*});
            } else {
                std.debug.print("Processed file or dir: {s}\n", .{entry.key_ptr.*});
            }
        }
    }
}
